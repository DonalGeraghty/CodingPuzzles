import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class FindUniqueNumberTest {

    @Test
    @DisplayName("Test array1")
    void firstTest() {
        double[] arr = {1, 1, 1, 2, 1, 1};
        assertEquals(2, findUnique(arr));
    }

    @Test
    @DisplayName("Test array2")
    void secondTest() {
        double[] arr = {0, 0, 0.55, 0, 0};
        assertEquals(0.55, findUnique(arr));
    }

    @Test
    @DisplayName("Test array3")
    void thirdTest() {
        double[] arr = {1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.099511627776E12, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15, 1.125899906842624E15};
        assertEquals(1.099511627776E12, findUnique(arr));
    }

    @Test
    @DisplayName("Test array4")
    void fourthTest() {
        double[] arr = {0.0, 1.0, 0.0};
        assertEquals(1, findUnique(arr));
    }


    /**
     * Find the unique value in array, with the assumption there will be one unique among many, will return -1 if none
     * Must be performant
     */
    private double findUnique(double[] arr) {
        for (int i = 0; i < arr.length - 2; i++) {
            if (arr[i] != arr[i + 1] || arr[i] != arr[i + 2]) {
                if (arr[i] == arr[i + 1]) {
                    return arr[i + 2];
                } else if (arr[i] == arr[i + 2]) {
                    return arr[i + 1];
                } else {
                    return arr[i];
                }
            }
        }
        return -1;
    }
}
